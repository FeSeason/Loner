{"./":{"url":"./","title":"起始","keywords":"","body":"Loner - 孤独者 Loneliness, is a person's carnival; carnival , is a group of people's loneliness. I would like to use this repository to record my daily life: work, study and other! 孤单，是一个人的狂欢；狂欢，是一群人的孤单。谨以此仓库，记录我（孤独者）的日常：工作、学习及其他！ 一 前言 本仓库始建于2018-01-08，开始的目的是记录每日成长。 我最大的缺点是不能坚持学习，或者说不爱学习，九年前就罹患厌学症--一看书就犯困，一学习就失忆。 2019年又过去1/4了，今年年初的计划，一一落空，前端技能没有增益反而减弱，二建复习每科只看了前十页。焦虑，成为毕业5年以来尤为突出的感受,坚持，成为这五年最应该有而一直缺席的品德，未来，在没能坚持的焦虑中，变得走投无路。今天，再度扬帆起航，但愿能找回坚持！计划，作出改变的第一步，☞ 学习计划折腾，尝试源于兴趣使然，☞ 兴趣探索监督，自我鞭策小步成长，☞ 暴走前端过去，往事不可追，将来，现在为基石；此刻不努力，未来的我，悔恨如同现在的我悔恨过去的我！ 二 目录 文件名 存放内容 CSS-library CSS 文档仓库 HTML-library HTML 文档仓库 JavaScript-library JavaScript 文档仓库 other-library 其他文档仓库(博客产出、服务端、个人日志等) public-repertory 文档仓库使用到的图片、CSS文件等…… 三 个人站点 目录 介绍 思否个人博客 segmentfault博客专栏 CSDN个人博客 CSDN个人博客专栏 yapi.fashaoge.com yapi本地部署 huqi.me 个人主站 四 云服务器推广 广而告之： 游(云)泳(服)健(务)身(器)了解一下阿里云腾讯云 打赏 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"SUMMARY.html":{"url":"SUMMARY.html","title":"目录","keywords":"","body":"文档库目录 起始 目录 留言板 ★ CSS 资料室 ★ HTML 资料室 ★ JavaScript 资料室 ★ 其他资料室 ☆ 博客 ☆ Copy攻城狮日志 ✔ CML之5分钟入门多端统一框架 ✔ Error if there's nested data rowKey is required ✔ Node.js之http下载图片失败 ✔ 借助Taro暴改Nideshop实现电商支付宝小程序雏形 ✔ 聊聊JavaScript heap out of mem ✔ 踩坑小程序之can't read property 'offsetLeft' of undefined ✔ 踩坑小程序之canvas的显示层级问题 ✔ 踩坑小程序之使用svg作为图标 ☆ 我的倔金 ✔ 记一次开源学习--D2Admin 人人企业版 ✔ node-sass-install-error ☆ 暴走前端 ☆ 日志 ✔ 2019-05 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:58:33 "},"CSS-library/":{"url":"CSS-library/","title":"★ CSS 资料室","keywords":"","body":"其他 Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 15:00:54 CSS document repository CSS文档仓库 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"HTML-library/":{"url":"HTML-library/","title":"★ HTML 资料室","keywords":"","body":"其他 Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 15:01:27 HTML document repository HTML 文档仓库 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"JavaScript-library/":{"url":"JavaScript-library/","title":"★ JavaScript 资料室","keywords":"","body":"其他 Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 15:01:58 JavaScript document repository JavaScript文档仓库 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/":{"url":"other-library/","title":"★ 其他资料室","keywords":"","body":"其他 Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 14:57:55 Other document repositories (blog output, server, personal log, etc.) 其他文档仓库(博客产出、服务端、个人日志等) 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/":{"url":"other-library/blogs/","title":"☆ 博客","keywords":"","body":"Loner Blogs Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 14:07:53 blogs目录下预计分为三个目录： ├─ Copy-Engineer-Logs // copy攻城狮日志系列，发布在[胡琦的博客](https://segmentfault.com/blog/huqi) ├─ d2-admin // d2-admin实战系列，预计发布在掘金 ├─ my-blogs // 预计维护个人博客huqi.me 广而告之： 游(云)泳(服)健(务)身(器)了解一下阿里云腾讯云 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/":{"url":"other-library/blogs/Copy-Engineer-Logs/","title":"☆ Copy攻城狮日志","keywords":"","body":"Copy攻城狮日志 Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 14:40:14 目录: 【Copy攻城狮日志】CML之5分钟入门多端统一框架 【Copy攻城狮日志】Node.js之http下载图片失败 【Copy攻城狮日志】踩坑小程序之使用svg作为图标 【Copy攻城狮日志】踩坑小程序之canvas的显示层级问题 【Copy攻城狮日志】踩坑小程序之can't read property 'offsetLeft' of undefined 【Copy攻城狮日志】借助Taro暴改Nideshop实现电商支付宝小程序雏形 【Copy攻城狮日志】聊聊JavaScript heap out of memory 广而告之： 游(云)泳(服)健(务)身(器)了解一下阿里云腾讯云 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】CML之5分钟入门多端统一框架.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】CML之5分钟入门多端统一框架.html","title":"✔ CML之5分钟入门多端统一框架","keywords":"","body":"Created by huqi at 2019-4-6 21:57:17Updated by huqi at 2019-4-7 22:54:55 ↑开局一张图，故事全靠编↑ CML是啥？变色龙又是啥？ 自从有小程序以来，小程序的第三方框架便孕育而生，从原始时代的只基于微信小程序多如今多端统一开发框架，可以说前端技术从2018年到2019年又发生了天翻地覆的变化。感觉现在和圈内人吹水，不蹦出几个诸如megalo、Taro、uni-app之类的新词都感觉没法混，哈哈。今天逛掘金的时候，偶然间打开了@Chameleon社区 发布的我们用5分钟写了一个跨多端项目,Chameleon刚刚开源的时候就有关注过，不过一直没有入手，看到开头这个视频教程就有了尝试的冲动(相比某个开源的商业化项目出的教程还需支付一定费用已经很良心了)，三天节假日也已经过去两天了，是该在Copy&Paste一下，不然连这个CP的技能冷却时间会变得更长。 一句话介绍CML：cml(Chameleon 变色龙） 作为真正让一套代码运行多端的框架，提供标准的MVVM模式，统一开发各类终端。 为什么要入手Chameleon？我觉得Chameleon的思想觉得我们学习，毕竟多端统一对前端来说是个大趋势。 ![https://segmentfault.com/img/bVbqXfK) 五分钟真的能入门吗？ 答案不肯定的，当然也不是否定的，要根据用户的实际场景实际情况，假如我连前端开发环境都木有，别说入门，就算是装个Cli环境甚至Node环境可能都要花费好几分钟；假如我掌握了一定技巧且有良好的环境，Copy&Paste也轻而易举的事。废话不多说，前提是您至少要用node环境。 安装node环境 详见@i5ting 的文章：狼叔：如何正确的学习Node.js 全局安装Chameleon构建工具 npm i -g chameleon-tool 我已安装node@10.14.1、chameleon-tool@0.0.16(展示没看到更新命令，最新0.1.1，并且暂不支持yarn、cnpm等安装方式) 创建项目(可选参数:project、page、component)，输入项目名会自动创建项目文件并安装依赖 cml init 说实话，如果npm不给力，别说5分钟，可能15分钟过去了估计还卡在npm installing... 那就先看看目录结构 ├── chameleon.config.js // 项目的配置文件 ├── dist // 打包产出目录(build之后显示) ├── alipay // 支付宝小程序代码(build之后显示) ├── baidu // 百度小程序代码(build之后显示) ├── wx // 微信小程序代码(build之后显示) ├── mock // 模拟数据目录(目前内置api和template文件夹) ├── node_modules // npm包依赖 ├── package.json // 包文件 ├── npm-shrinkwrap.json // 锁定依赖版本 └── src // 项目源代码 ├── app // app启动入口(包含app.cml) ├── assets // 静态文件夹(包含默认images) ├── components // 组件文件夹(包含默认组件) ├── pages // 页面文件夹(包含默认页面) ├── router.config.json // 路由配置 └── store // 全局状态管理(类似Vuex) .cml文件vscode默认是不支持的，不过已经有拓展可以下载 如果npm依赖安装不成功，可以手动安装；或者切换成taobao源 通过运行help命令查看chameleon的帮助提示 cml -h Usage: chameleon [command] [options] Options: -V, --version 输出版本号 -h, --help 输出使用信息 Commands: init [options] 初始化变色龙(chameleon)项目的模板 dev [options] 启动开发模式 build [options] 启动构建模式 server [options] 开发环境服务器的工具 web [options] Web项目的工具 weex [options] Weex项目的工具 wx [options] 微信小程序项目的工具 baidu [options] 百度小程序项目的工具 alipay [options] 支付宝小程序项目的工具 运行dev命令启动dev环境，同时浏览器会打开彩蛋 cml dev web 当然，也许不一定一帆风顺，遇到问题先本地排查，实在解决不了再去chameleon官方仓库翻翻issue，或者直接提出issue。 既然是Copy&paste，那就直接把@jalonjs 大佬创建的cml-first-demo直接复制过来，一边看文档一边敲代码，尽走上从入门到放弃的康庄大道！ Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】Error if there's nested data rowKey is required.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】Error if there's nested data rowKey is required.html","title":"✔ Error if there's nested data rowKey is required","keywords":"","body":" Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 13:01:14 ↑开局一张图，故事全靠编↑ 从最新学习d2开源项目说起 有时候，非常非常地迷茫，找不到方向，找不到人生的方向，找不到未来的方向，找不到学习的方向。现在的状态，犹如一叶扁舟，漂浮着茫茫的大海之上。工作日，每天起床机械地去上班，周末，每天优哉游哉，好像一个木偶，被生活蹂躏的木偶，意识以外的力量在操纵着的木偶。在技术上的积累也渐渐走下坡路了，基础不牢固，也采取过一些办法，不知是疗程不够还是病入膏肓已无可救药，总之，明明知道有病，却怎么也治不好。最近，又加入了梁sir的暴走前端计划，重新折腾起来，于是开始学习，目前折腾了一下Vue.js，在看d2改版renren的项目,跟着@FairyEver大佬踩了不少坑,其中就有element-ui的这个坑--\"Error: if there's nested data, rowKey is required.\" 刨根问到底，探究报错的原因 首先，不用怀疑，这是一个bug，理论上是element-ui中el-table的一个bug，但又不能说是一个bug，因为人家框架原型设计的就是这样，只是可能我们使用不当。先粗略分析一下报错的原因： 1. 没有加row-key属性 如文档中所提及的，结合报错的字面意思 ☞文档:table： 支持树类型的数据。此时，必须要指定 row-key。支持子节点数据异步加载。设置 Table 的 lazy 属性为 true 与 加载函数 load ，指定 row 中的 hasChildren 来确定哪些行是包含子节点。 那就copy一下官方案例，el-table加上row-key=\"id\" 不过，对row-key的支持应该是2019年3月左右提供的。☞Table: support tree structure data 修改element-ui版本 很气人啊，我只能修改package.json文件中依赖element-ui的版本。 一般来说，默认安装的依赖，如果package.json中带 ^ 符号的话，会默认安装最近的版本，去掉 ^ 符号，重新安装一下element-ui依赖就可以解决了。至于改用那个版本，按照实际来吧，如果去掉 ^ 符号重新安装能成功就可以了，不行就换个版本吧。 修改children字段 这个就不是很好的处理方式了，毕竟后台返回来的数据，你要他改字段，呵呵呵，当然，你话语权足够的话，又不想改前台代码，就让他替换一下childre字段吧。当然，官方将提供更改children键值的api。 别问我children字段哪来的，我的是后台传过来的； 也别问我为什么会冲突， 我猜是和之里冲突☞源码: getChildren(forceInit = false) { // this is data if (this.level === 0) return this.data; const data = this.data; if (!data) return null; const props = this.store.props; let children = 'children'; if (props) { children = props.children || 'children'; } if (data[children] === undefined) { data[children] = null; } if (forceInit && !data[children]) { data[children] = []; } return data[children]; } 至于怎么前台怎么修改children字段，我也不会，大概是深浅拷贝之类的操作吧 我最终通过修改element-ui版本和加row-key属性解决了，前端路漫漫坑多多，能趟一个算一个！ 本小篇写于 天河区图书馆华港分馆 ,第一次来图书馆看……小姐姐。 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】Node.js之http下载图片失败.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】Node.js之http下载图片失败.html","title":"✔ Node.js之http下载图片失败","keywords":"","body":"Created by huqi at 2019-4-5 22:24:33Updated by huqi at 2019-4-5 23:23:56 ↑开局一张图，故事全靠编↑ 从解答一个知否上的问题说起 有时候，自己就像自己在知否的签名一样--我以为的就是我以为的？一直以来，对前端技术的一知半解一叶障目，导致我遇到问题总是片面，比如这次，就翻车了。技术水平就那样，然后我居然还想着帮人家解答，这不是误人子弟吗？昨天解答的这个问题，是关于node.js的http方法，根据Url获取网络图片写入到本地文件夹，这个需求我之前是玩过的，但用的是Copy&Paste的代码，也没有细细研究源码，只知道用的是request的模块，不过这次的哥们没有依赖任何第三方模块，只是用的内置的http模块。他遇到的问题就是上图所见，有一张图片没有下载成功无法正常显示。具体问题见@夜鹰 ：用Node.js读取远程的图片文件并写入本地？ 通过内置http模块下载图片源码 引入内置http模块发起请求获取文件 引入内置fs模块写入文件 ``` const http = require('http') const fs = require('fs') const urlArr = [ 'http://img.zcool.cn/community/01e505554437be0000019ae95582a2.jpg@900w_1l_2o_100sh.jpg', 'http://static.pig66.com/uploadfile/2017/1102/20171102095531217.png', ] urlArr.forEach(url => { getImg(url) }) function getImg(url, name) { http.get(url, {encoding: null}, res => { let img = [] let size = 0 // 将图片地址以【.】符号分割，取最后一项，即为格式后缀 const _arr = url.split('.') const format = _arr[_arr.length - 1] // 如果没有传入图片名字，则使用随机数 const _name = name ? name : 'image-' + Math.floor(Number(new Date()) * Number(Math.random())) res.on('data', chunk => { img.push(chunk) size += chunk.length }) res.on('end', () => { // 合并 Buffer const buffer = Buffer.concat(img, size) fs.writeFileSync(img/${_name}.${format}, buffer, (err) => { if (err) { return console.error(err); } console.log(\"数据写入成功！\"); }) }) }) } 对来说，起初我以为是文件太大的原因，因为通过输出查看到Buffer数据中断并直接结束了。后来我试了下1M左右的图片，完全能够成功下载，然而，打脸啪啪啪。接下来，我草率地下了结论，并丢给博主一段使用第三方模块request的同样功能的实现(见历史版本：[共被编辑 4 次](https://segmentfault.com/q/1010000018760426/a-1020000018760914/revision))。真相纠结是怎样的？另一位答主@啊哦 已经给出了相当明确的答案！ [!aa](https://segmentfault.com/img/bVbqWbT?w=1071&h=515) # “罪魁祸首”--301重定向 > 301重定向（）页面永久性移走）是一种非常重要的“自动转向”技术。网址重定向最为可行的一种办法。当用户或搜索引擎向网站服务器发出浏览请求时，服务器返回的HTTP数据流中头信息(header)中的状态码的一种，表示本网页永久性转移到另一个地址。 打开图片链接：http://www.pig66.com/uploadfile/2017/1102/20171102095531217.png，通过查看Network，我们清晰地看到源图片有做301重定向。通过在源代码中添加日志输出，我们也能清楚地看到301的状态码。 ![clipboard.png](https://segmentfault.com/img/bVbqV9y) ![clipboard.png](https://segmentfault.com/img/bVbqV9R) 既然问题的根源已经找到，那就对症写bug，如果是301的话获取请求返回的真实地址再次发起请求。 const { statusCode } = res if ( statusCode === 301 ) { const url = res.headers['location'] return getImg(url) } 修改后的代码： const http = require('http') const fs = require('fs') const urlArr = [ 'http://img.zcool.cn/community/01e505554437be0000019ae95582a2.jpg@900w_1l_2o_100sh.jpg', 'http://static.pig66.com/uploadfile/2017/1102/20171102095531217.png', ] urlArr.forEach(url => { getImg(url) }) function getImg(url, name) { http.get(url, {encoding: null}, res => { const { statusCode } = res console.log(statusCode) if ( statusCode === 301 ) { const url = res.headers['location'] return getImg(url) } let img = [] let size = 0 // 将图片地址以【.】符号分割，取最后一项，即为格式后缀 const _arr = url.split('.') const format = _arr[_arr.length - 1] // 如果没有传入图片名字，则使用随机数 const _name = name ? name : 'image-' + Math.floor(Number(new Date()) * Number(Math.random())) res.on('data', chunk => { img.push(chunk) size += chunk.length }) res.on('end', () => { // 合并 Buffer const buffer = Buffer.concat(img, size) fs.writeFileSync(img/${_name}.${format}, buffer, (err) => { if (err) { return console.error(err); } console.log(\"数据写入成功！\"); }) }) }) } 成功拿到图片，并能直观的感受到301重定向之后又发起了一次请求， 后记 这两天朋友托我写两个简单的页面，我发现自己啥也不会！想想我，居然还这么热心地去帮人解答，真的是误人子弟害人不浅。谨以此次经历深刻反省自我，对被我坑过的各位表示深切的歉意。同时，也希望各位大佬不惜多多赐教!最后，祝@jsliang 生日快乐！写在生日，一年前端拼搏记 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】借助Taro暴改Nideshop实现电商支付宝小程序雏形.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】借助Taro暴改Nideshop实现电商支付宝小程序雏形.html","title":"✔ 借助Taro暴改Nideshop实现电商支付宝小程序雏形","keywords":"","body":" ↑开局一张图，故事全靠编↑ 从一个需求说起 作为底层的程序猿，哦不，我连猿都算不上，混的好的叫码神，混得一般的叫码农，混得有点差的叫码畜，混得极差的，就像我这样的，叫码渣。去年，2018年年底，12月份，运营的大佬提出了想做电商类支付宝小程序的想法，需求很简单：做一个自己的商城，上架到支付宝小程序应用市场。一句话，简单明了，需求很明确啊，可这句话对我来说，要实现的难度，比起李白上蜀道还难，比难于上青天还难。细细一想，做商城，得有后台管理系统吧？得有支付系统吧？得有订单管理等一系列业务支撑的后台吧？我一小小的前端，本身业务基础又差，每天上班8小时划水10小时，竟然让我独自完成一个电商支付宝小程序，哈哈哈哈哈。不过，本来没做实质性项目的我，怎么会畏惧，怎么能退缩，生死看淡，不服就干！谁给我的自信？开源社区啊！作为“资深”的Copy码渣，接到任务我就在github开始寻符合需求的demo，皇天不负有心人，我把github翻了个遍，收获寥寥无几，各位大佬有啥支付宝小程序开源的项目请一定推荐给我，Copy选不中对象，就无法愉快地进行Paste。为了快速交付，经过对比选用@tumobi大佬的Nideshop“全家桶”，于是就有了这次借助Taro的taro convert转化微信小程序为支付宝小程序的经历。在我看来，我写不出如此出色的开源项目，倘若我能借助这些项目快速完成自己的工作，享受开源带来的乐趣，对于现阶段的我而言，足矣！(绝逼不敢相信，从业多年的程序员依旧是这么low！) （图片来源于网络） 环境准备 工欲善其事必先利其器。9102年了，还有谁在用notepad写代码？当然，对于我们前端而言，谁的电脑没装个node\\git\\vscode之类的软体？如果您还没装的话，赶紧装吧，装完您就会嘿嘿嘿，对于我而言没有ndoe我无法工作，没有前端开发环境，我就不快乐。 (图片来源于网络) 在您的平台上下载 Node.js 源码或预编译安装包，然后即可马上进行开发。去下载 git--distributed-is-the-new-centralized。去下载 小程序开发者工具定位于「一站式小程序研发工具」，专门为小程序开发打造，提供了项目管理、编码、调试、真机测试等功能。去下载 其他的好像也没啥了，当年好像我的还装了Python|jJava|Android等环境，那是2016年的事了追忆,现在看来很傻很天真，其实没必要。 Copy进行时 Taro 可以将你的原生微信小程序应用转换为 Taro 代码，进而你可以通过 taro build 的命令将 Taro 代码转换为对应平台的代码，或者对转换后的 Taro 代码进行用 React 的方式进行二次开发。之前一直在期待taro的这个功能，虽然不会React，也要尝试一下，也希望通过这些实践更加了解React并好好学习，从我接触的内容来说，React是前端开发必备的技术栈。 Taro安装 /** Quick Start With NPM Or Yarn **/ $ npm install -g @tarojs/cli $ yarn global add @tarojs/cli nideshop-mini-program下载 git clone https://github.com/tumobi/nideshop-mini-program.git cd nideshop-mini-program 转化为taro taro convert 通过以上步骤可以得到一个taroConvert的文件夹，就算暂时成功的了。 安装依赖 cd taroConvert npm i 对于大多数前端项目来说，现阶段不可避免的问题是可能一个不算复杂的项目会依赖上百个npm包，也正是因为这些包，大大解放了生产力，一定程度上提高了开发效率。当然，如同硬币有两面，伴随着便捷高效的同时也带来了一定的安全风险。可能大厂都是自己造轮子吧！ 打包成支付宝小程序 npm run build:alipay 理想状态是可直接打包成dist的，but…… 接下来就捋一捋存在的问题，为什么要手动修改一些问题？ 为什么要暴力修改 首先回到taro的官方文档看下 taro convet会遇到哪些坑 在小程序 IDE 显示 _createData 错误☞了解 这里我们好像暂时没遇到这个问题，也不知道是哪个小程序IDE会有如此问题，先忽略了。 转换 wxParse 报错不存在文件☞了解 这个问题我们要及时改正，在执行taro conver前先把wxParse.wxml中46行到128行的wxParse1修改为wxParse0 不支持 relations 和 Behavior了解 这个问题我们代码里好像没有这些组件，暂时忽略 转换 wepy 文件不成功了解 这个问题我们肯定不存在，因为这个项目没有使用wepy,继续忽略。 现在看来，以上问题貌似都不存在，那么我们先回到这个报错 凭我多年的copy经验，一定是文件不存在或者文件引用路径有问题。不慌，对比了原文件taro convert之后的taroConvert目录里边的wxParse,的确发现了小问题：wxParse目录下的文件缺失,除了wxParse.js过来了，其他的都没有被转换。那就暴力一回，使出我的Copy大法，手动转换过去，并修改几处引用的相对路径，继续build。 接下来，在支付宝小程序开发者工具中打，不出意外能跑起来一个电商支付宝小程序雏形。 github地址☞☞nideshop-alipay by taro convert 以上是我这个Copy攻城狮对使用taro convert转换原生微信小程序为支付宝小程序的一次微不足道的实践。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】聊聊JavaScript heap out of memory.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】聊聊JavaScript heap out of memory.html","title":"✔ 聊聊JavaScript heap out of mem","keywords":"","body":" ↑开局一张图，故事全靠编↑ 从一次宕机说起 这是一个很狗血的故事，故事的开头是一个项目，这个项目十分草率，草率到什么程度？没有设计稿，没有文档，需求全靠口口相传，当然最草率的是交给了我，我简单列了下需求： 官网的形式，主要介绍公司某些业务 要能发文章 尽管很简单的需求，对于水得一匹的我来说，简直是“难于上青天”，三大件(html,css,javascript)我样样精通个P，网站部署我也只略知一二，代码编水平更是不学无术。作为Copy工程师，遇到需求我便开始了copy之路，先github溜达了一圈，找了几个满足需求的项目，最终对比了一下，选择了一个名叫iBlog2的项目--基于 Node.js 的个人开源博客系统。您没看错，就是一个博客系统！这跟官网有个毛关系？这个宕机又有个毛关系？我想说的是，经过copy然后小改之后，iBlog2摇身一变就成了能发布文章的官网项目，就是这么简单粗暴，就是这么不学无术(温馨提示：少壮不努力，老大偷代码)。 这个3年之前的项目，在现在看来的确是有些陈旧，但作者@eshengsky依旧坚持不懈的在更新维护,而对于我而言，只是为了完成能发文章的官网，所以只关注文章是如何发布和储存的，恰恰是因为我关注的面窄，忽略了部署和部署之后可能会遇到的各种问题，比如window下pm2可能出现问题、比如这次的JavaScript heap out of memory。当然并不是人家开源项目有问题，而是实际部署的时候压根没按照作者的文档来，如果按照文档，我应该用pm2部署，或者启用redis，或者使用Noginx,或者使用本机的MongoDB服务，然而，这一切，我只是在我们那个服务器新开了个端口，然后直接npm run dev就开始跑在线上了，所以呢，这么“锈”的操作，不宕机才是天理难容，印象中JavaScript heap out of memory遇到两次了，才两三个月啊！ 检索JavaScript heap out of memory 通常遇到问题，我首选的解决流程是打开Chrome--输入关键词--搜索--浏览--copy--尝试，好像从来没有去思考过产生问题的根源，甚至都没有去记录这个问题以及解决的方案，导致再遇到同样的坑，又掉进去了，然后又是一通检索尝试等操作，这也是我从业这么多年来，一直没养成的习惯，也是这么多年一直没成长的某一个小的原因，“少抱怨，多思考，未来会更美好”，而我一直以反面教材在诠释这个金句。 通常来说，只要您的关键词够准确，您就能通过google搜索找到尽可能满意的解决方案，如果连关键词都没把握好，我想就算请教的大牛，也不一定能有效的回答，当然思否和Stack Overflow都可能有填您那个坑的“铁楸”，还有一个阵地就是github。 通常来说，程序报错一般都有详细的报错说明，比如哪一行、出了什么错、出错明细等，就比如文章开头的那张报错图，我找到了其他用户遇到的一模一样的问题： [8138:0x102801600] 145460 ms: Mark-sweep 1265.6 (1301.6) -> 1265.6 (1308.6) MB, 289.8 / 0.0 ms allocation failure GC in old space requested [8138:0x102801600] 145740 ms: Mark-sweep 1265.6 (1308.6) -> 1265.6 (1277.6) MB, 280.6 / 0.0 ms last resort gc [8138:0x102801600] 146035 ms: Mark-sweep 1265.6 (1277.6) -> 1265.6 (1277.6) MB, 295.0 / 0.0 ms last resort gc ==== JS stack trace ========================================= Security context: 0x39c891dc0d31 1: DoJoin(aka DoJoin) [native array.js:~97] [pc=0x5d1facabad4](this=0x39c891d04311 ,q=0x5a024bf3be1 ,r=2241635,F=0x39c891d043b1 ,B=0x39c891ddafe9 ,A=0x39c891d04421 ) 2: Join(aka Join) [native array.js:~122] [pc=0x5d1fb5cde96](this=0x39c891d04311 ,q=0x5a024bf3be1 ,r=2241635,B=0x39c891ddafe9 , v8::Local) [/Users/erossignon/.nvm/versions/node/v7.2.0/bin/node] 3: v8::internal::V8::FatalProcessOutOfMemory(char const*, bool) [/Users/erossignon/.nvm/versions/node/v7.2.0/bin/node] 4: v8::internal::Factory::NewRawTwoByteString(int, v8::internal::PretenureFlag) [/Users/erossignon/.nvm/versions/node/v7.2.0/bin/node] 5: v8::internal::Runtime_StringBuilderJoin(int, v8::internal::Object**, v8::internal::Isolate*) [/Users/erossignon/.nvm/versions/node/v7.2.0/bin/node] 6: 0x5d1faa063a7 Abort trap: 6 FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory这个是报错的关键词，通常也是我们检索的关键词，至于为什么会导致这个错误，报错信息就显示JavaScript堆内存不足，信息中也显示了最近几次GC的详情，GC(Garbage collection )是垃圾回收机制，具体可以阅读一下JavaScript 内存泄漏教程。经过初步了解，就是我们的应用内容泄露的，通常治标不治本的解决方案就是加大Node.js运行时内存中保留的“未使用”空间量： node --max-old-space-size=4096 yourFile.js JavaScript heap out of memory的原因 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】踩坑小程序之can't read property 'offsetLeft' of undefined.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】踩坑小程序之can't read property 'offsetLeft' of undefined.html","title":"✔ 踩坑小程序之can't read property 'offsetLeft' of undefined","keywords":"","body":"Created by huqi at 2019-4-2 22:17:34Updated by huqi at 2019-4-2 23:17:34 ↑开局一张图，故事全靠编↑ 从一个需求说起 接触过小程序的同学应该都接触过这样一个需求：点击列表页的某一项，进入详情页。同样，今天我也遇到这样一个需求，其实很简单的一个需求，无非就是一个tap事件加dataset传参实现路由带参数跳转到详情页。以前开发小程序的时候，也处理过这样的需求，本来应该是得心应手的。不过，可能是Copy别人代码Copy得太多太久太深，也从来没自主去想过别人为什么这样写、换种方式要怎样写、为什么换种方式就会报错等等诸如此类的问题，更别说去熟读开源源码，甚至自己造轮子。有时候反思，自己入行这么多年了，资质依旧平平，别说造轮子，就算是把别人轮子拿过来安上，都能整出一堆B.U.G。就比如开头的图片上，用的是鹅厂旗下某著名公司的豪华套餐，居然被我用得翻车了！--TypeError: Cannot read property 'offsetLeft' of undefined !!!简直了，还是只能怪自己技术太low了。 （图片来源于网络） 提问的智慧 自从朋友给了我一个SS的IP和密码，现在我一有问题就是直接google开干。在我看来，与其把问题抛到各种广告满天飞的技术群或者丢给朋友圈里边的大佬，倒不如自己先动手解决，哪怕是尝试了所有的答案，至少对问题会有更深的理解，以后面试中遇到面试官问您在项目中遇到过什么问题之类的，因为经过自己的一番搜索加实践，一般印象会深刻很多。反而别人直接告诉您答案的，可能您的成本更小，但是收获甚微。根据以往的经验，遇到问题，自己动手，是更接近答案的唯一出路。或许您在开发中，遇到了某些问题，您通过一些途径解决了这个问题，然后，您又记录了下来，后续您遇到同样的问题，应该是可以迎刃而解的。如果您还把解决方案分享出来了，您简直是在造福人类。后来者，托您的福，更快的解决了同样的问题。 尝试方案1--重启开发者工具 can't read property 'offsetLeft' of undefined #1132 这是来自全球最大的同性交友网站GitHub上的一个issue，是由@yuwanlin 在一套遵循 React 语法规范的多端统一开发框架Taro中提出来的。根据当时的情境，是在微信开发者工具中删掉该小程序然后重新载入就解决了，大家给出的结论是微信小程序开发者工具的B.U.G。(注：该操作不会删除文件，请放心使用)--但是，我按照楼主的说法操作了一遍，结果然并卵，还是原来的B.U.G，还是一样的报错。 该方案失败 尝试方案2--外层加view 自定义组件在首次点击后会报错 @欧新志 这个小咯咯在2018-06-14向微信社区提出了类似的问题，他那个是自定义组件在点击之后出现了和我同款的B.U.G，而且也是存在嵌套子组件。评论中各位大神给出的答案是嵌套view。我也尝试了，试着加了一层view，但是问题依旧存在。不过我感还是和嵌套的子组件有关。于是，我各种尝试终于找到了一个方案。 第一次滚动和点击的时候都有这个报错, 下面是报错时的组件wxml 如果换成下面这样就不报错了 解决方案3--tap事件加在子组件里面 原代码： {{item.name}} {{item.business}} {{item.time}} {{item.status}} 修改之后： {{item.name}} {{item.business}} {{item.time}} {{item.status}} 只是把方法挂载到了不同的位置，确实截然不同的效果。看来接下来应该再研究一下小程序的组件。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】踩坑小程序之canvas的显示层级问题.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】踩坑小程序之canvas的显示层级问题.html","title":"✔ 踩坑小程序之canvas的显示层级问题","keywords":"","body":"Created by huqi at 2019-4-3 18:29:53Updated by huqi at 2019-4-3 19:12:22 ↑开局一张图，故事全靠编↑ 从一个需求说起 狼叔@i5ting[i5ting] 曾说过：“单纯讲技术进阶点意义不大，脱离场景都是耍流氓”。今天，依旧从一个需求说起。什么需求呢？一个二维码，一个二次确认弹窗。这里的二维码是前端生成的，二维码下边有个button，点击button调起自定义的弹窗组件。依旧是很简单的需求，但是对于“资深”的Copy攻城狮来说，除了布局，其他的就只能去Copy了。分析了一下可能需要的代码，就开始'刷刷刷'一顿CP(Copy&Paste)操作猛如虎，结果跑下代码发现error二百五。特别是真机跑的时候，问题特别多。像这次的问题，开发者工具上压根就发现不了，幸好习惯性真机预览，不然一通push就等着失业了。还是坑在基础不牢固，文档看得不深入，对小程序原生组件应该注意的事项把握不准，才会掉入这个非常基础的坑。 (图片来源于网络) canvas生成二维码 通常来说，遇到这种类似的需要，我都会先找找被人造的轮子，尝试一下，有合适的就直接拿过来用了。这次用的是@yingye 大佬开源的weapp-qrcode,这个js应该是借鉴了jquery-qrcode 和 node-qrcode,有兴趣的同学可以研究研究，生码的逻辑应该是类似的，只是小程序中没有DOM操作，都是利用canvas来实现的。具体怎么实现，各位看客可以直接看相关的源码或文档。我的实现： wxml wxss canvas{ display: block; margin: 0rpx auto; /** 居中 **/ } js drawQrcode({ width: 140, // 必须，二维码宽度，与canvas的width保持一致 height: 140, // 必须，二维码高度，与canvas的height保持一致 x: 0, // 非必须，二维码绘制的 x 轴起始位置，默认值0 y: 0, // 非必须，二维码绘制的 y 轴起始位置，默认值0 canvasId: 'myQrcode', // 非必须，绘制的canvasId typeNumber: 10, // 非必须，二维码的计算模式，默认值-1 text: '您的二维码内容', // 必须，二维码内容 callback(e) { // 非必须，绘制完成后的回调函数 console.log('e: ', e) } }) 二维码效果： canvas使用限制 当我页面如上图一样。底部有个按钮。点击唤起自定义的弹窗组件，在开发者工具上呈现的效果十分正常。但是在真机上就会出现文字开头的不和谐现象。canvas直接覆盖住了自定义组件。通过翻阅文档，您会发现官方特别写出了Bug&Tip： 3.tip：请注意原生组件使用限制。 4.bug: 避免设置过大的宽高，在安卓下会有crash的问题 然后点开原生组件使用限制，就会发现本B.U.G的根本原因了： 原生组件的层级是最高的，所以页面中的其他组件无论设置 z-index 为多少，都无法盖在原生组件上。 也就是说canvas会覆盖自定义的dialog组件。那么怎么解决呢？我的思路是“曲线救国”--将canvas转成image。一不做二不休，撸起袖子，开干！ 将canvas转换成image 既然原生组件（camera、canvas、focus时的input、live-player、live-pusher、map、textarea、video）这么牛逼，那就打压一下，去掉他们高贵的身份，豁免他们享有的特权，彻底ge他们的命，恢复他们的平民身份。按照这个思路，开始一步一步来实现 wxml js data: { renderImg: '' }, onLoad: function(){ drawQrcode({ width: 140, // 必须，二维码宽度，与canvas的width保持一致 height: 140, // 必须，二维码高度，与canvas的height保持一致 x: 0, // 非必须，二维码绘制的 x 轴起始位置，默认值0 y: 0, // 非必须，二维码绘制的 y 轴起始位置，默认值0 canvasId: 'myQrcode', // 非必须，绘制的canvasId typeNumber: 10, // 非必须，二维码的计算模式，默认值-1 text: '您的二维码内容', // 必须，二维码内容 callback(e) { // 非必须，绘制完成后的回调函数 console.log('e: ', e) if(e.errMsg == 'drawCanvas:ok') { // 新增转图片 wx.canvasToTempFilePath({ x: 0, y: 0, width: 140, height: 140, canvasId: 'myQrcode', success: function(res) { me.setData({ renderImg: res.tempFilePath}); } }); } } }) } 以上将canvas替换成image，不过遇到闪烁的问题，这是wx:if特有的，这里通过取巧的办法，只改了canvas的样式： wxss canvas{ display: block; margin: 0rpx -9999px; /** 占位解决二维码闪屏 **/ } image{ display: block; margin: 0rpx auto; /** 居中 **/ } 至此，已填了这个canvas显示层级过高的坑。 如您有更好的方案，欢迎提出指正！ 如您觉得文章解决了您的问题，欢迎打赏! Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:52:16 "},"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】踩坑小程序之使用svg作为图标.html":{"url":"other-library/blogs/Copy-Engineer-Logs/【Copy攻城狮日志】踩坑小程序之使用svg作为图标.html","title":"✔ 踩坑小程序之使用svg作为图标","keywords":"","body":"Created by huqi at 2019-4-4 22:02:27Updated by huqi at 2019-4-4 23:12:34 ↑开局一张图，故事全靠编↑ 本地资源无法通过 WXSS 获取 都9102年了，我居然还会犯如此低级的错误。不经想起去年犯的一个更低级的错误，事情的经过是这样的，去年@肖蜀黍 在某个群里丢了一个小程序链接--tell心语,这个小程序本身就具有传奇色彩，背后的故事更是感动人心，就是现实版的解忧杂货店；主要的功能是写信，也就是文字输入。然后，我居然脑残地去测试xss！！！不学无术，还要自命不凡，像我这样的没被祭天就是万幸了。这次，又是基本的常识都没掌握，直接淹死在浅坑里。background-image：可以使用网络图片，或者 base64，或者使用标签。这个是常识，连入门级小程序员都知道的。那我究竟写了个什么B.U.G？毫无疑问，一定是在BG中直接引用了本地图片。 乳此低级的错误，一定要贴出来，示众以鞭策！ .refresh-icon{ background: url('refresh.svg'); } .del-icon{ background: url('del.svg'); } 获取iconfont的svg图 作为老司机的“幼儿班程序员”，应该是没有资格拿到切好的图标了，没办法，技不如人，只能自己动手去啥都有的网上找找。关于图标，我最先想到的是阿里巴巴矢量图标库，这个由阿里妈妈MUX倾力打造的矢量图标管理、交流平台，设计师可以将图标上传到这个平台，用户可以自定义下载多种格式的icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。虽然可以将图标转化为字体应用，但对于我来说，就使用那么几个图标，实在是不想引用一大堆css、ttf等文件，只想用下svg。具体怎么操作，胸中自然有了竹子。 搜索和UI图一模一样的图标，建议按照英文关键字查询，如del、refresh等 点击下载进入下载模态详情页，选择合适的颜色下载svg 转换svg为background 既然官方文档说了，不让直接引用本地图片，但给了三条路，那我就随便远一条喽，反正我不想用网络图片，我也不想用image标签，那就只有转成base64喽，至于什么是base64，我也不知道，那就超度一下喽：☛base64。但是怎么快速将svg转换成这个base64甚至直接输出成css样式呢？我说，首先您得有工具得到svg源码，我用vscode，直接打开svg就是svg源代码；然后转base64，偶然发现了国外大佬在codepan上的在线实现,文章的话可以参考下“优化数据uris中的svgs” ,我特意fork了一份来学习，感兴趣的可以看下源码。有了这个工具，svg生成background也就是我专门干的事=copy&paste 获取svg源码 生成background 重写background 既然base64已经手到擒来了，那么实现图标按钮还会远吗，来来来，有请代码说话： 超级简单！！！搜衣滋！ .my-icon{ background-size: cover; display: inline-block; width: 50rpx; height: 50rpx; vertical-align: middle; margin-right: 4px; } .refresh-icon{ background-image: url(\"data:image/svg+xml,%3C?xml version='1.0' standalone='no'?%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg t='1554354671724' class='icon' style='' viewBox='0 0 1024 1024' version='1.1' xmlns='http://www.w3.org/2000/svg' p-id='1543' xmlns:xlink='http://www.w3.org/1999/xlink' width='200' height='200'%3E%3Cdefs%3E%3Cstyle type='text/css'%3E%3C/style%3E%3C/defs%3E%3Cpath d='M936.571429 603.428571q0 2.857143-0.571429 4-36.571429 153.142857-153.142857 248.285715T509.714286 950.857143q-83.428571 0-161.428572-31.428572T209.142857 829.714286l-73.714286 73.714285q-10.857143 10.857143-25.714285 10.857143t-25.714286-10.857143-10.857143-25.714285v-256q0-14.857143 10.857143-25.714286t25.714286-10.857143h256q14.857143 0 25.714285 10.857143t10.857143 25.714286-10.857143 25.714285l-78.285714 78.285715q40.571429 37.714286 92 58.285714t106.857143 20.571429q76.571429 0 142.857143-37.142858t106.285714-102.285714q6.285714-9.714286 30.285714-66.857143 4.571429-13.142857 17.142858-13.142857h109.714285q7.428571 0 12.857143 5.428572t5.428572 12.857142z m14.285714-457.142857v256q0 14.857143-10.857143 25.714286t-25.714286 10.857143h-256q-14.857143 0-25.714285-10.857143t-10.857143-25.714286 10.857143-25.714285l78.857142-78.857143q-84.571429-78.285714-199.428571-78.285715-76.571429 0-142.857143 37.142858T262.857143 358.857143q-6.285714 9.714286-30.285714 66.857143-4.571429 13.142857-17.142858 13.142857H101.714286q-7.428571 0-12.857143-5.428572T83.428571 420.571429v-4q37.142857-153.142857 154.285715-248.285715T512 73.142857q83.428571 0 162.285714 31.714286T814.285714 194.285714l74.285715-73.714285q10.857143-10.857143 25.714285-10.857143t25.714286 10.857143 10.857143 25.714285z' p-id='1544' fill='%23ffffff'%3E%3C/path%3E%3C/svg%3E\"); } .del-icon{ background-image: url(\"data:image/svg+xml,%3C?xml version='1.0' standalone='no'?%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg t='1554355910565' class='icon' style='' viewBox='0 0 1024 1024' version='1.1' xmlns='http://www.w3.org/2000/svg' p-id='2306' xmlns:xlink='http://www.w3.org/1999/xlink' width='200' height='200'%3E%3Cdefs%3E%3Cstyle type='text/css'%3E%3C/style%3E%3C/defs%3E%3Cpath d='M817.968553 215.897142l-169.357176 0 0-58.869782c0-25.391297-20.657482-46.048779-46.048779-46.048779l-181.125197 0c-25.391297 0-46.048779 20.657482-46.048779 46.048779l0 58.869782-169.357176 0c-25.391297 0-46.048779 20.657482-46.048779 46.048779l0 71.631434c0 25.391297 20.657482 46.048779 46.048779 46.048779l28.321022 0 0 425.947112c0 59.246359 48.200792 107.447151 107.447151 107.447151l340.40076 0c59.246359 0 107.447151-48.200792 107.447151-107.447151L789.647531 379.626133l28.321022 0c25.391297 0 46.048779-20.657482 46.048779-46.048779l0-71.631434C864.017332 236.554624 843.35985 215.897142 817.968553 215.897142zM426.553932 162.14389l170.892135 0 0 53.753251-170.892135 0L426.553932 162.14389zM738.482221 805.574269c0 31.033807-25.248034 56.281841-56.281841 56.281841L341.79962 861.85611c-31.033807 0-56.281841-25.248034-56.281841-56.281841L285.517779 379.626133l452.964442 0L738.482221 805.574269zM812.852022 328.460824l-601.704045 0 0-61.398372 203.227588 0c2.302439 0.356111 4.66116 0.542352 7.061836 0.542352l181.125197 0c2.400676 0 4.759397-0.186242 7.062859-0.542352l203.226564 0L812.852022 328.460824zM513.023306 783.320429c14.128789 0 25.582655-11.453866 25.582655-25.582655l0-288.572348c0-14.128789-11.453866-25.582655-25.582655-25.582655-14.128789 0-25.582655 11.453866-25.582655 25.582655l0 288.572348C487.440651 771.866562 498.894518 783.320429 513.023306 783.320429zM645.541459 783.320429c14.128789 0 25.582655-11.453866 25.582655-25.582655l0-288.572348c0-14.128789-11.453866-25.582655-25.582655-25.582655s-25.582655 11.453866-25.582655 25.582655l0 288.572348C619.958804 771.866562 631.41267 783.320429 645.541459 783.320429zM380.505154 783.320429c14.128789 0 25.582655-11.453866 25.582655-25.582655l0-288.572348c0-14.128789-11.453866-25.582655-25.582655-25.582655s-25.582655 11.453866-25.582655 25.582655l0 288.572348C354.922499 771.866562 366.376365 783.320429 380.505154 783.320429z' p-id='2307' fill='%23ffffff'%3E%3C/path%3E%3C/svg%3E\"); } 附上效果图： svg转换核心源码 // 用于创建优化的svg url的函数 // Version: 1.0.6 @function svg-url($svg){ // // 补齐命名空间 // @if not str-index($svg,xmlns) { $svg: str-replace($svg, '&ltsvg','&ltsvg xmlns=\"http://www.w3.org/2000/svg\"'); } // // 避免一大块的字符串 // 抛出“堆栈级别太深”错误 // $encoded:''; $slice: 2000; $index: 0; $loops: ceil(str-length($svg)/$slice); @for $i from 1 through $loops { $chunk: str-slice($svg, $index, $index + $slice - 1); // // 编码 // $chunk: str-replace($chunk, '\"', '\\''); $chunk: str-replace($chunk, '%', '%25'); $chunk: str-replace($chunk, '#', '%23'); $chunk: str-replace($chunk, '{', '%7B'); $chunk: str-replace($chunk, '}', '%7D'); $chunk: str-replace($chunk, '&lt;', '%3C'); $chunk: str-replace($chunk, '&gt;', '%3E'); // // 预计列表 // // 保持大小并缩短编译时间 // ... 只添加记录的失败 // // $chunk: str-replace($chunk, '&', '%26'); // $chunk: str-replace($chunk, '|', '%7C'); // $chunk: str-replace($chunk, '[', '%5B'); // $chunk: str-replace($chunk, ']', '%5D'); // $chunk: str-replace($chunk, '^', '%5E'); // $chunk: str-replace($chunk, '`', '%60'); // $chunk: str-replace($chunk, ';', '%3B'); // $chunk: str-replace($chunk, '?', '%3F'); // $chunk: str-replace($chunk, ':', '%3A'); // $chunk: str-replace($chunk, '@', '%40'); // $chunk: str-replace($chunk, '=', '%3D'); $encoded: #{$encoded}#{$chunk}; $index: $index + $slice; } @return url(\"data:image/svg+xml,#{$encoded}\"); } // Background svg mixin @mixin background-svg($svg){ background-image: svg-url($svg); } // 替换字符串中的字符的辅助函数 @function str-replace($string, $search, $replace: '') { $index: str-index($string, $search); @return if($index, str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace), $string); } 总算是又get了一个知识点，最近做小程序，遇到的难题还是挺多的，比如还没有解决的wx.redirectTo闪屏问题，有大佬要是恰好遇到过类似的坑，欢迎多多指教！ Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/blogs/my-blogs/d2-admin-renren-security-enterprise.html":{"url":"other-library/blogs/my-blogs/d2-admin-renren-security-enterprise.html","title":"✔ 记一次开源学习--D2Admin 人人企业版","keywords":"","body":" Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-20 15:57:37 前言 上个月月底@D2开源组 开源了使用 D2Admin 适配 人人企业版(专业版) 的前端工程--d2-admin-renren-security-enterprise,具体详情见☞D2Admin 人人企业版适配发布。由于最近有开发后台管理系统的需求，加上其他诸多因素，如：想学习优秀的开源项目、刚好参加@jsliang 组织的暴走前端、之前项目使用过renren-fast-vue等等，于是乎萌生了根据commits学习了解d2-admin如何改造renren-security前端的想法。当然，也督促自己产出一篇相关的文章，来记录这次有趣的学习之旅。 前置准备 所谓“工欲善其事必先利其器”，连我这样的Copy攻城狮都要搭建的前端基础开发环境，都9102年啦，再没有node环境都没法进行前端开发了，再不济运行d2-admin的环境总该有吧！ 安装环境这里请参考D2 Admin快速上手部分：☞安装环境 Fork D2-Admin@1.6.18这里紧跟@FairyEver 大大的思路，基于D2-Admin@1.6.18 开发。当然也可以通过D2 Admin CLI来初始化项目,具体操作参照：☞下载项目 了解D2Admin项目结构有过开发经历的同学在项目开发之前一般都有过项目结构搭建的经历，当然如果您不幸和我一样只会用别人搭建好的工程脚手架，那您一定会先了解整个项目目录结构，不然还真不知道源码要写在哪里。 项目结构 ~~~ ├─ docs // 文档 ├─ packages // 额外的包 ├─ public // 公共文件 ├─ src // 源码目录 │ ├─ assets // 资源 │ │ ├─ icons │ │ ├─ image │ │ ├─ library │ │ └─ style │ ├─ components // 组件 │ │ ├─ charts │ │ ├─ core │ │ └─ demo │ ├─ i18n // 多语言 │ ├─ menu // 菜单 │ ├─ mock // 模拟数据 │ ├─ pages // 页面 │ ├─ plugin // 插件 │ ├─ router // 路由 │ ├─ store // vuex │ ├─ utils │ ├─ App.vue │ └─ main.js ├─ tests // 测试文件 ├─ .browserslistrc // 浏览器兼容设置 ├─ .env // 环境变量 ├─ .env.development // 开发环境变量 ├─ .env.nomock // nomock环境变量 ├─ .env.travis // 生成环境变量 ├─ .eslintignore // ESLint忽略 ├─ .eslintrc.js // ESLint配置 ├─ .gitignore // git忽略 ├─ .postcssrc.js // postcss配置 ├─ .travis.yml // 持续集成服务 ├─ babel.config.js // babel配置 ├─ cdnrefresh-dirs.txt // cdn设置 ├─ jest.config.js // jest设置 ├─ LICENSE // 开源协议 ├─ package-lock.json // 包文件锁版本 ├─ package.json // 包文件 ├─ qiniu-config // 七牛云配置 ├─ qshell // 七牛API服务命令行工具 ├─ README.md |— README.zh.md ├─ vue.config.js // vue配置 ~~~ 删除无关文件删除.browserslistrc、.env.nomock、.env.travis 、.gitignore、.postcssrc.js、.travis.yml、cdnrefresh-dirs.txt 、package-lock.json、 qiniu-config 、qshell、README.zh.md、README.md、doc/image、package/*。具体可查看：☞删除暂时未用到模块 修改package.json移除暂时未用到的包,如多语言，这个版本将简化多语言目录结构，如图表库、富文本编辑、右键菜单等：countup.jsechartsgithub-markdown-csshighlight.jsmarkedmockjssimplemdev-chartsv-contextmenuvue-grid-layout vue-i18nvue-json-tree-viewvue-splitpanevue-ueditor-wra@kazupon/vue-i18n-loader删除build:nomock命令，增加环境变量文件.env、.env.production、.env.production.sit、.env.production.uat等。至此，可以通过npm install 或 yarn来安装项目依赖，并通过npm run dev之类的指令运行项目，具体指令可查看 package.json 文件中 scripts 部分。 重写国际化 至于为什么要重写，要问大佬了。我也只能妄加揣测：简化结构！之前的结构是一个index.js+lang文件夹，lang文件夹里又包含多个语言文件夹，现在的结构直接了当--index.js+多个语言js文件。关于国际化我也只是很肤浅的了解，虽然之前接触过的项目也做过，里边坑的确挺多的，除了基本的翻译还要结合当地的文化习俗，这里就不展开讨论，搜索关键字i18n便有众多的解决方案。回到大佬@FairyEver 的源码，跟着他了解一下vue-i18n的使用： 安装依赖 npm install vue-i18n main.js中引入 ```js // ... // i18n import i18n from '@/i18n' // ... new Vue({ i18n, // ... )} - 新建语言包，构建js 核心代码： index.js ~~~js // 引入相关依赖及语言包 import Vue from 'vue' import VueI18n from 'vue-i18n' import Cookies from 'js-cookie' // 附带引入element-ui的多语言切换 import zhCNLocale from 'element-ui/lib/locale/lang/zh-CN' import zhTWLocale from 'element-ui/lib/locale/lang/zh-TW' import enLocale from 'element-ui/lib/locale/lang/en' // 引入语言包 import zhCN from './zh-CN' import zhTW from './zh-TW' import enUS from './en-US' Vue.use(VueI18n) // 定义使用的语言 export const messages = { 'zh-CN': { '_lang': '简体中文', ...zhCN, ...zhCNLocale }, 'zh-TW': { '_lang': '繁體中文', ...zhTW, ...zhTWLocale }, 'en-US': { '_lang': 'English', ...enUS, ...enLocale } } // 默认从cookie中读取或设置为中文 export default new VueI18n({ locale: Cookies.get('language') || 'zh-CN', messages }) ~~~ 语言包以湾湾繁体为例： zh-TW.js ~~~js // 定义语言对象 const t = {} t.loading = '加載中...' // 构建对象 t.brand = {} t.brand.lg = '人人權限企業版' t.brand.mini = '人人' // ... export default t ~~~ - 使用 App.vue ~~~js // 选择语言 import Cookies from 'js-cookie' import { messages } from '@/i18n' export default { name: 'app', watch: { '$i18n.locale': 'i18nHandle' }, created () { this.i18nHandle(this.$i18n.locale) }, methods: { i18nHandle (val, oldVal) { Cookies('language', val) document.querySelector('html').setAttribute('lang', val) document.title = messages[val].brand.lg // 非登录页面，切换语言刷新页面 if (this.$route.name !== 'login' && oldVal) { window.location.reload() } } } } ~~~ 页面中使用，如： ```js // template {{ $t('login.motto.text') }} :placeholder=\"$t('login.form.placeholderUsername')\" // script this.$t('login.motto.text') 检验成果实践是检验真理的唯一标准。 修改i18n/index.js 将locale改为湾湾繁体，就能直观的看到title的变化，（别问我为啥页面上的文字怎么没变化？因为写死为简体中文啦！） 注意： 实现vue-i18n+element-ui多语言切换需手动注册如，参考element-ui国际化： // i18n import i18n from '@/i18n' // Element import ElementUI from 'element-ui' import 'element-ui/lib/theme-chalk/index.css' // Element Vue.use(ElementUI, { i18n: (key, value) => i18n.t(key, value) }) 文字部分全部修改为国际化后，就可以看到明显的效果啦： 多语言切换 既然有了国际化的基础，那么实现一个多语言切换的小功能应该是水到渠成。来看看@FairyEver是怎么教的！ 偶然间看到d2-admin中的标签可以使用flex这个属性，感到很好奇。 flex，对于新世纪的前端开发来说最熟悉不过，但是标签上直接写flex属性，作为很水很水的老菜鸟却是孤落寡闻，不过职业病的直觉告诉我一定是跟flex布局有关。于是我按图索骥，先翻阅了一下package.json，里边果然找到一个flex.css的依赖包。大概实现怎样的效果呢？我的认知是通过标签的flex属性，无需写css即可实现flex布局，flex.css内部通过定义属性选择器样式来实现flex布局，更多关于flex.css请戳☞flex.cc。 这里通过elemen-ui的el-dropdown实现,通过command事件修改语言设置 $i18n.locale = command\"> {{ $t('login.language') }} {{ language.label }} 对接人人验证码 一般来说，做登录页的时候，我们或多或少会遇到验证码的需求，对了，这里的验证码指的是图形验证码。最简单的实践是直接拿后台给过来的图片直接渲染的在页面上，使用 img标签 或者 background-image 引入。之前做renren-fast-vue二次开发的时候用的img标签，这里用的背景图片，思路都一样：拿后台给的图片直接渲染。众所周知，Just do it！ 定义获取uuid的工具函数: /** * @description [ renren ] 获取uuid */ util.getUUID = function () { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => { return (c === 'x' ? (Math.random() * 16 | 0) : ('r&0x3' | '0x8')).toString(16) }) } 使用uuid获取图形验证码 ~~~html ~~~ ~~~js // 选择语言 import Cookies from 'js-cookie' import { messages } from '@/i18n' export default { name: 'app', watch: { '$i18n.locale': 'i18nHandle' }, created () { this.i18nHandle(this.$i18n.locale) }, methods: { i18nHandle (val, oldVal) { Cookies('language', val) document.querySelector('html').setAttribute('lang', val) document.title = messages[val].brand.lg // 非登录页面，切换语言刷新页面 if (this.$route.name !== 'login' && oldVal) { window.location.reload() } } } } ~~~ axios及登录逻辑 自从摆脱了JQuery大法，阿贾克斯和我从此是陌生人，以至于面试官要我阐述阿贾克斯原理，我真是哑巴吃黄连，哦不，是哑口无言，一个以CP(Copy&Paste)为生的搬砖工，你们还指望他侃侃而谈什么原理什么底层？至于什么axios拦截，总之，这一块涉及到前后交互的知识点还是蛮多的，我也是七窍通灵六窍--一窍不通，勉勉强强解读一下大佬的封装： axios简单封装 // 引用相关依赖及方法 import axios from 'axios' import { Message } from 'element-ui' import Cookies from 'js-cookie' import { isPlainObject } from 'lodash' import qs from 'qs' // import util from '@/libs/util' import router from '@/router' import store from '@/store' // 记录和显示错误 function errorLog (error) { // 添加到日志 store.dispatch('d2admin/log/push', { message: '数据请求异常', type: 'danger', meta: { error } }) // 打印到控制台 if (process.env.NODE_ENV === 'development') { // util.log.danger('>>>>>> Error >>>>>>') console.log(error) } // 显示提示 Message({ message: error.message, type: 'error', duration: 5 * 1000 }) } // 创建一个 axios 实例 const service = axios.create({ baseURL: process.env.VUE_APP_API, timeout: 1000 * 180, // 请求超时时间 withCredentials: true // 当前请求为跨域类型时是否在请求中协带cookie }) /** * 请求拦截 */ service.interceptors.request.use( config => { // 在请求发送之前做一些处理，如设置headers config.headers['Accept-Language'] = Cookies.get('language') || 'zh-CN' config.headers['token'] = Cookies.get('token') || '' // 默认参数 var defaults = {} // 防止缓存，GET请求默认带_t参数 if (config.method === 'get') { config.params = { ...config.params, ...{ '_t': new Date().getTime() } } } if (isPlainObject(config.data)) { // 纯粹对象解构赋值 config.data = { ...defaults, ...config.data } if (/^application\\/x-www-form-urlencoded/.test(config.headers['content-type'])) { // 序列化请求数据 config.data = qs.stringify(config.data) } } return config }, error => { // 发送失败 console.log(error) return Promise.reject(error) } ) /** * 响应拦截 */ service.interceptors.response.use( response => { // 处理响应 if (response.data.code === 401 || response.data.code === 10001) { // clearLoginInfo() // alert('TODO clearLoginInfo') // TODO: 清除用户信息 router.replace({ name: 'login' }) return Promise.reject(response.data.msg) } if (response.data.code !== 0) { errorLog(new Error(response.data.msg)) return Promise.reject(response.data.msg) } return response.data.data }, error => { errorLog(error) return Promise.reject(error) } ) export default service 登录的话，需要调用api，按照d2-admin的项目结构，在src/api下定义api接口，如sys.login.js: ```js import request from '@/plugin/axios' export function login (data) { return request({ url: '/login', method: 'post', data }) } ``` 调用api进行登录： ```js // ... import { login } from '@api/sys.login' // ... submit () { this.$refs.loginForm.validate((valid) => { if (!valid) return login(this.form) .then(async res => { await this.login(res) this.$router.replace(this.$route.query.redirect || '/') }) .catch(this.updateUUID) }) } // ... ``` 当然还需要对数据进行处理，比如登录状态持久化、设置vuex用户信息等等，这里暂时只做简单的处理，另外安利一个vscode插件(乳沟您恰巧用的宇宙第一神器)--[TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight),用来突出显示代码中的todo、fixme和其他注释，听说老司机都在用。有时，在将代码发布到生产环境之前，在编码时忘记查看添加的TODO。所以就有了这个拓展，提醒我们有一些笔记或者事情还没有完成。mark一下！ ![d2-admin-renren-security-enterprise-TODO](https://user-gold-cdn.xitu.io/2019/5/20/16ad4cd3c75af38a?w=752&h=556&f=png&s=45729) ### 标准化cookie使用 作为后台管理系统，免不了涉及到cookie的使用，按照大佬的思路，定义了工具集函数并基于[js-cookie](https://github.com/js-cookie/js-cookie)二次封装了cookie。一般来说，cookie用得最多的就是get和set两个方法。 cookie简单封装 ~~~js import Cookie from 'js-cookie' /** * @description 存储 cookie 值 * @param {String} name cookie name * @param {String} value cookie value * @param {Object} setting cookie setting */ export const cookieSet = function (name = 'default', value = '', cookieSetting = {}) { let currentCookieSetting = { expires: 1 } Object.assign(currentCookieSetting, cookieSetting) Cookie.set(`d2admin-${process.env.VUE_APP_VERSION}-${name}`, value, currentCookieSetting) } /** * @description 拿到 cookie 值 * @param {String} name cookie name */ export const cookieGet = function (name = 'default') { return Cookie.get(`d2admin-${process.env.VUE_APP_VERSION}-${name}`) } /** * @description 拿到 cookie 全部的值 */ export const cookieGetAll = function () { return Cookie.get() } /** * @description 删除 cookie * @param {String} name cookie name */ export const cookieRemove = function (name = 'default') { return Cookie.remove(`d2admin-${process.env.VUE_APP_VERSION}-${name}`) } ~~~ 如图，能看到目前通过此次标准化封装之后存的cookie的name都加了**d2admin-**的前缀。 ![d2-admin-renren-security-enterprise-cookie](https://user-gold-cdn.xitu.io/2019/5/20/16ad4d2de1512354?w=1754&h=716&f=png&s=71105) ### 防止过度点击 节流这个知识点我也是一直懵懵懂懂，经常和防抖混淆，理解不深刻，还只是停留在字面意思理解上：函数节流是指定时间间隔内只执行一次，函数防抖是频繁触发只有间隔超过指定时间间隔才执行。请参考[debouncing-throttling-explained-examples](https://css-tricks.com/debouncing-throttling-explained-examples/) 这里简单粗暴的用了[lodash](https://github.com/lodash/lodash)--一个一致性、模块化、高性能的 JavaScript 实用工具库。。 lodash中包含一系列数组、数字、对象、字符串等操作的API，当然还有一些常用的工具函数如节流(throttle)、防抖(debounce)。 ```js // ... import { debounce } from 'lodash' // ... submit: debounce(function () { // ... }, 1000, { 'leading': true, 'trailing': false }) // _.debounce(func, [wait=0], [options={}]) // options.leading 与|或 options.trailing 决定延迟前后是先调用后等待,还是先等待后调用 // ... ``` 前后对比: 未处理的时候，触发的请求令人发指！ ![d2-admin-renren-security-enterprise-debounce](https://user-gold-cdn.xitu.io/2019/5/20/16ad4d4ebd835cad?w=1503&h=798&f=gif&s=3302964) 处理之后，控制台让人感觉很清爽 ![](https://user-gold-cdn.xitu.io/2019/5/20/16ad4d690eec71f4?w=1503&h=798&f=gif&s=3456950) ### 关于全局配置 项目做得太少了，尤其还不会java，对网站的全局配置这一块的理解还停留在初级认知阶段。一般来说，在网页开发中往往一些版本控制、CDN静态资源、api接口地址、常用的公共变量等都会写到window下面并提升至首页方便管理，如网易一些爆款的H5中这种手法非常常见。在我之前使用开源的renren-fast-vue中这种手法更是大量运用，这次学习d2-admin也借鉴一下这种全局变量的使用(挂载变量一时爽，一直挂载一直爽,小心别翻车了)。先不管了，一顿Copy操作猛如虎，定睛一看，注释占了百分之九十五！当然，代码了瞬间有了后端的痕迹，不过在本项目 public/index.html中使用的模板语法来源于[ lodash 模板插入](https://lodash.com/docs/4.17.11#template),和public文件夹相关的内容可以去翻翻d2-admin文档关于[cli 和 webpack 配置](https://doc.d2admin.fairyever.com/zh/sys-cli3-webpack/)部分，这里就不再赘述，总之，万丈高楼平地起，基础建设很重要！ 全局配置window.SITE_CONFIG ~~~js window.SITE_CONFIG = {}; window.SITE_CONFIG['version'] = ''; // 版本 window.SITE_CONFIG['nodeEnv'] = ''; // node env window.SITE_CONFIG['apiURL'] = ''; // api请求地址 window.SITE_CONFIG['storeState'] = {}; // vuex本地储存初始化状态（用于不刷新页面的情况下，也能重置初始化项目中所有状态） window.SITE_CONFIG['contentTabDefault'] = { // 内容标签页默认属性对象 'name': '', // 名称, 由 this.$route.name 自动赋值（默认，名称 === 路由名称 === 路由路径） 'params': {}, // 参数, 由 this.$route.params 自动赋值 'query': {}, // 查询参数, 由 this.$route.query 自动赋值 'menuId': '', // 菜单id（用于选中侧边栏菜单，与this.$store.state.sidebarMenuActiveName进行匹配） 'title': '', // 标题 'isTab': true, // 是否通过tab展示内容? 'iframeURL': '' // 是否通过iframe嵌套展示内容? (以http[s]://开头, 自动匹配) }; window.SITE_CONFIG['menuList'] = []; // 左侧菜单列表（后台返回，未做处理） window.SITE_CONFIG['permissions'] = []; // 页面按钮操作权限（后台返回，未做处理） window.SITE_CONFIG['dynamicRoutes'] = []; // 动态路由列表 window.SITE_CONFIG['dynamicMenuRoutes'] = []; // 动态(菜单)路由列表 window.SITE_CONFIG['dynamicMenuRoutesHasAdded'] = false; // 动态(菜单)路由是否已经添加的状态标示（用于判断是否需要重新拉取数据并进行动态添加操作） ~~~ 大厂某H5案例中全局配置挂载 前端轻量级web进度条-NProgress 感觉像我这种资深Copy级别的零级工程师，对于一些炫酷的页面效果，除了感叹\"牛掰\",就是一顿复制粘贴。当我看到d2-admin使用的NProgress是0.2.0版本的时候，我以为是个比较新的第三方库，抱着刨根到底的学习心态，我点开了NProgress的github仓库，看到作者@rstacruz的主页，不禁赞叹：\"牛掰!\"。说来也巧，@justjavac 大神翻译的速查表就源自作者的cheatsheets。虽然NProgress诞生于2013年8月,(那时我还在学校把妹，对js的了解还只是不小心按到F12),@rstacruz对她的维护长达5年之久，目前有18.8K的star，而@rstacruz本尊更是值得我辈瞻仰的大神。 来看看NProgress怎么使用：一行代码实现web进度条。 //... import NProgress from 'nprogress' import 'nprogress/nprogress.css' //... NProgress.start() //... NProgress.done() NProgress的实现原理也很好理解，源码比较简洁，大概是加载开始调用start，加载完成调用done，至于加载进度、具体加载到哪了，都不关心，中间状态是随机的进度，从源码中看到大概加载到99.4%的位置就停了。 NProgress核心源码 ~~~js NProgress.inc = function(amount) { var n = NProgress.status; if (!n) { return NProgress.start(); } else if(n > 1) { return; } else { if (typeof amount !== 'number') { if (n >= 0 && n = 0.2 && n = 0.5 && n = 0.8 && n max) return max; return n; } ~~~ 感兴趣的同学可以看看源码学习学习！☞nprogress.js iframe的支持 在d2-admin中，其实是有实现iframe类型的内容页组件的-- d2-container-frame,从源码来看，是iframe是嵌套在d2-container组件中的，利用绝对定位实现iframe充满d2-container盒子。 d2-container-frame简单实现 ~~~js export default { name: 'd2-container-frame', props: { src: { type: String, required: false, default: 'https://doc.d2admin.fairyever.com/zh/' } } } .d2-container-frame { position: absolute; top: 0px; left: 0px; height: 100%; width: 100%; } ~~~ 在改造renren的项目中，大佬巧妙的利用组装route的方式，实现了iframe单独渲染，具体可以看下源码：☞支持 iframe 加载方式： // ... // 组装路由 var route = { path: '', component: null, name: '', meta: { ...window.SITE_CONFIG['contentTabDefault'], menuId: menuList[i].id, title: menuList[i].name } } // ... route['path'] = route['name'] = `i-${menuList[i].id}` route['meta']['iframeURL'] = URL route['component'] = { render (h) { return h('d2-container', {}, [ h('iframe', { style: { position: 'absolute', top: '0px', left: '0px', height: '100%', width: '100%' }, attrs: { src: URL, frameborder: 0 } }) ]) } } // ... 后记 源码虽然没有细看，不过还是根据commits提交记录，粗略的一步一步copy实现了一番。整个过程还是很有趣的，毕竟算是参与了开源，还给大佬提了issue，捉了bug。但是，总得来说，还有很多知识点没细看，如vue的mixins、众多页面的具体实现、iconfont的使用、Vuex的使用、自定义皮肤的实现、顶部菜单栏的实现等等，期间也遇到一些编译上的问题，如el-table的坑☞Error: if there's nested data, rowKey is required.。感觉整个过程还学的不踏实，很多知识点只是一搜带过，可能还是项目做少了。路漫漫其修远，慢慢摸索吧。 HR的领导来电话催回家了，匆匆落笔，结束此篇，江湖再见！ Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 13:00:42 "},"other-library/change-for-myself/":{"url":"other-library/change-for-myself/","title":"☆ 暴走前端","keywords":"","body":"huqi Created by huqi at 2019-1-21 21:03:26Updated by huqi at 2019-5-5 12:56:09 一 实践进度 【5-5】 又中断了一个月，再度启航！人生越来越暗淡！ 【4-2至4-7】 中断了数月，唉，完了！完了！ 【1-23】 今天的文章居然没写完 是关于fusion design的 【1-22】之前尝试使用taro convert转换微信小程序为支付宝小程序，一直失败，今天继续琢磨了一下，成功转换了雏形，先记录一下，希望能完善后续的功能(感觉要失业T-T)。 【1-21】参与暴走前端的第一天，首先mark一下。刚好今天遇到一个Node进程内存泄露的问题，记录一下。 目前笔记  -> 【Copy攻城狮日志】CML之5分钟入门多端统一框架 -> 【Copy攻城狮日志】Node.js之http下载图片失败 -> 【Copy攻城狮日志】踩坑小程序之使用svg作为图标 -> 【Copy攻城狮日志】踩坑小程序之canvas的显示层级问题 -> 【Copy攻城狮日志】踩坑小程序之can't read property 'offsetLeft' of undefined -> 【Copy攻城狮日志】借助Taro暴改Nideshop实现电商支付宝小程序雏形 -> 【Copy攻城狮日志】聊聊JavaScript heap out of memory 二 目标对比清单 目前现状 进阶目标 坐标： 广州 广州 薪资： 9K 10K+ 职位： 前端工程师 前端工程师 工作经验： 三年 四年 工作内容： 1. 使用 Vue 全家桶Copy项目 2. 项目原型产出 3. 原Jquery项目的维护 4. 小程序的开发与维护 1. 能使用 React 全家桶进行项目开发 2. 有 Node.js 编程经验，并进行过 Node.js 实践 3. 熟悉 Python，能进行运营的技术支持 4. 熟悉 ES6、ES&，并尝试在项目中使用过 ES6 设计模式 4. 了解uniapp、Flutter等，并尝试产出项目 拥有技能： 1. 知道基础的 HTML、CSS、JavaScript，基本的 PSD 图能完美切成网页 2. 了解并会使用 jQuery 进行前端页面开发 3. 有微信小程序相关的开发经验 4. 学习过 Webpack 中文文档，并搭建过 Webpack 多页面配置 ……其他省略，不值一提 1. Vue 2. React 3.Node 4. Koa 5. MongoDB 6. MySQL 7. React Native&小程序&快应用 8. 掌握至少一门后端语言，如Python 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/change-for-myself/logs/":{"url":"other-library/change-for-myself/logs/","title":"☆ 日志","keywords":"","body":"Loner 日常 Created by huqi at 2019-5-5 13:01:14Updated by huqi at 2019-5-5 13:01:14 一 日常作息 晚上 11:30 睡，早上 06:30 起床。 07:00 - 08:30 学习一个半钟。 21:30 - 23:00 学习一个半钟。 周末休息，学习 || 娱乐。 二 学习计划 【2019-05-05】React Native项目结构搭建&d2-Admin学习。接下来的学习和工作重点都围绕React Native展开。另外巩固学习Vue，这里通过学习d2-admin最新的开源项目d2-admin-renren-security-enterprise源码来巩固学习Vue的后台管理实战开发。 三 兴趣探索 H5相关案例研究。目前以TrandoMedia公司的案例为主，各大厂的热门案例为辅，兼顾未来编辑器ivx 2019，立志成为ivx布道者。 码上公益,马上行动！希望自己快速成长，能尽快担当公益项目的项目经理。现在也有很多机会，目前的水平怕是会把项目搞黄，有项目拉我入伙哦！ 云服务的探索，主要关注阿里云的云应用和云开发，另外就是阿里云大学和腾讯云大学的学习。 fusion、飞冰在前端开发中应用的探索。 广而告之： 游(云)泳(服)健(务)身(器)了解一下阿里云腾讯云 本作品 由 Loner 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。基于https://github.om/hu-qi/Loner上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。 Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:56:57 "},"other-library/change-for-myself/logs/2019-05.html":{"url":"other-library/change-for-myself/logs/2019-05.html","title":"✔ 2019-05","keywords":"","body":" Loner 日常 - 2019-05 鉴于一直断断续续的学习状况已经影响到生存了，从2019年5月开始，重新开始新的学习&工作计划，希望自己能坚持！最近感觉压力越来越大，一是工作上的，二是生活上的。工作上的压力源于对React及React Native的不熟悉以及基础薄弱，已经难以适应新的工作开发。生活上的压力源于不断升级的生活开支以及不曾增长的收入，导致近几年财政赤字不断扩大，已有崩盘瓦解的趋势。一个仓库，一次提交，一分坚持，都无法改变现状，但是，一天天的坚持，一次次的总结，总会所有成长和收获。by 2019-5-5 13:31:46 很迷茫，万丈高楼平地起，成功只能靠自己。Vue的基础都还不牢固就学后台管理系统的源码，React都还没入门就开始搭React Native的脚手架，只能从Copy中来到Copy中去喽！明天，该如何是好？by 2019-5-8 18:50:02 挂起任务： [x] 整理产出一篇博文(持续跳票中……暂时挂起) [ ] 苗苗阅读小程序待前后联调及修改登录状态保持逻辑(等后台确认) Note 这个周末争取搞定，周日下午要参加网易严选新品座谈会，下周末要裸考(去现场看题)！ 2019-05-21 [x] 继续学习React Native，得找个优秀的开源项目学习学习 [ ] 完善前端工程规范 每日一结 30 days for react native，第一天就没有完成。不过看了3，40页的Java基础。 2019-05-20 [x] 文章，码伊利!终于成了！ [x] 完善前端开发规范 每日一结 文章终于完成了算是给自己一个胶带吧，估计沉了！今天过节，买个榴莲回去跪😂 2019-05-19 [x] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security 每日一结 上午图书馆，下午有幸去了网易，开心比啥都重要，网易大佬何南风朋友圈还翻了我的牌子😄 2019-05-18 [x] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security [ ] 文章，码伊利！ 每日一结 开始周末泡图书馆，希望能坚持，相约华港分馆！ 2019-05-17 [ ] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security [x]产出Vue.js简单入门资料 [x]微信登录模块、前后联调 每日一结 塞翁失码，焉知祸福？今天下午得知小程序商城项目不做了！唉，做也不爽，不做好像也不爽。最近的工作都是在技术预研，好像两个月了。这几天要整前端开发规范，头大。 2019-05-16 [x] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security [x]产出电商小程序预研报告 [ ]产出Vue.js简单入门资料 每日一结 感觉每天都是这么虚度了，今天整理微信小程序相关的资料居然磨了一天洋工！目前这个速度，试用期要gg！ 2019-05-15 [ ] 整理产出一篇博文(又跳票了！暂时挂起) [ ] 苗苗阅读小程序待前后联调及修改登录状态保持逻辑(等后台确认) [ ] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security 每日一结 今天列的任务多没完成，上午整理了一下vue的知识点，发现整理的进度太慢了，而且PPT基本废了。下午接到新任务，马上就要进行电商小程序的开发，目前先技术预研。慌得一匹，又是大几个月没敲代码了！ 2019-05-14 [ ] 整理产出一篇博文(又跳票了！) [ ] 苗苗阅读小程序待前后联调及修改登录状态保持逻辑(等后台确认) [x] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security 每日一结 文章估计得再准备准备，又新加了一个知识点。今天签了100w的保密协议，第一次接触到超级大的项目，争取通过项目提升自己！好像，今天又混过去了，上午Copy一下开源项目，下午开了个小会。 2019-05-13 [ ] 整理产出一篇博文(再不发，拖延症要治！😂) [ ] 苗苗阅读小程序待前后联调及修改登录状态保持逻辑 [ ] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security 每日一结 整个人都是懵的，今天我干啥了？研究了一天的全景看房，然后写了一两个小时试用期工作总结😂，虚度光阴啊！ 2019-05-12 [ ] 整理产出一篇博文(再不发，拖延症要治！) [ ] 苗苗阅读小程序该修改好发布上线了 [ ] 继续学习[d2-admin-renren-security-enterprise](https://github.com/d2-projects/d2-admin-renren-security 每日一结 相当于休息了一天!不会java,一直报空指针异常，然后捣鼓了一天，啥也没搞定！遇到的问题:小程序中调登录 接口，能成功返回，但是返回的是后台定义的500，后台空指针异常，悲剧！ 2019-05-11 [X] 加班参与产品设计讨论😂 还在公司😂 [ ] 整理产出一篇博文(再不发，灵感就没了) [ ] 测试使用GRN 测试不通过😂 [ ] 继续学习d2-admin-renren-security-enterprise-数据转换，优化页面跳转逻辑，多标签页实现 什么？ 2019-05-10 [x] 搭建React Native脚手架-初步搭建GRN [x] 继续学习d2-admin-renren-security-enterprise-初步页面跳转、菜单图标适配 每日一结 真的猛士，敢于直面惨淡的人生！ 2019-05-09 [x] 搭建React Native脚手架-初步搭建完成并完善GRN-CLI [x] 继续学习d2-admin-renren-security-enterprise-菜单栏、基本页面 每日一结 业精于勤荒于嬉！可惜找不到方向，无限迷惘中…… 2019-05-08 [x] 搭建React Native脚手架-初步搭建 [ ] 继续学习d2-admin-renren-security-enterprise-首页、菜单栏 每日一结 还没学会走路就要开始跑了！管它呢，尽情折腾吧！ 2019-05-07 [x] 搭建React Native脚手架-熟悉ignite及携程的CRN [x] 继续学习d2-admin-renren-security-enterprisemenu 简化、api 使用 service 模式导出以及初步优化 每日一结 路漫漫其修远兮，吾将上下而求索！ 2019-05-06 [x] 分析项目已有功能及重构难点 [x] 继续学习d2-admin-renren-security-enterprise关于cookie的标准化使用、节流、完善注销、优化renren util 2019-05-05 [x] 分析项目已有功能及重构难点 [x] 继续学习d2-admin-renren-security-enterprise Copyright © [huqi.me](https://www.huqi.me) 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-22 12:52:16 "}}